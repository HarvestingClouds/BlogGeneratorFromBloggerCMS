[
	{
		"author": "@20aman",
		"title": "Step by Step Azure Resource Manager (ARM) Templates - Index",
		"postDate": "15-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "**Azure Resource Manager (ARM) Template** is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources. The template can be used to deploy the resources consistently and repeatedly.\r\n\r\nARM Templates can be used for the deployment of resources on both Azure and Azure Stack. Using these templates for all deployments provides you with various **benefits** including:\r\n\r\n - **Declarative Deployment** \u2013 All you need to do is declare what you need to deploy. You don't need to create any complex rules or write lengthy scripts.\r\n - **Idempotency** \u2013 You can deploy the same template over and over again without affecting the current resources.\r\n - **Predictability** - Using Templates you can have accurate predictability when performing large deployments. You reduce any manual errors.\r\n - **Repitition without Errors** - You can deploy the same infrastructure over and over again (e.g. in Dev-test environments and then in production).\r\n\r\nThis series of posts try to decode and understand the ARM Templates \"Step By Step\".\r\n\r\nThis post is an index of all the posts, in sequence, for understanding the Azure Resource Manager (ARM) Templates. This post will be updated regularly as more posts on this topic are added.\r\n\r\n 1. [Index](#) \r\n 2. [JSON 101 for IT Administrators](\/post\/step-by-step-arm-templates-json-101-for-it-administrators\/)\r\n 3. [What is in an ARM Template - Understanding All Components](\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/)\r\n 4. [What is in an ARM Template - Understanding Components 2 - Parameters](\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/)\r\n 5. [What is in an ARM Template - Understanding Components 3 - Variables](\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/)\r\n 6. [What is in an ARM Template - Understanding Components 4 - Resources](\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/)\r\n 7. [What is in an ARM Template - Understanding Components 5 - Outputs](\/post\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/)\r\n 8. [Helper Functions in ARM Templates](\/post\/step-by-step-arm-templates-helper-functions\/)",
		"savedraft": "savedraft",
		"dated": "Sep 30, 2016",
		"slug": "step-by-step-azure-resource-manager-arm-templates-index",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p><strong>Azure Resource Manager (ARM) Template<\/strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources. The template can be used to deploy the resources consistently and r...<\/p>\n",
		"addpost": "addpost",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - Building your first ARM Template",
		"postDate": "04-09-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "In this blog post, we will use the knowledge learnt in previous blogs and will build a basic ARM template. \r\nIf you haven't checked previous blog posts then have a quick read of your preferred topics here: [Step by Step Azure Resource Manager (ARM) Templates - Index](\/post\/step-by-step-azure-resource-manager-arm-templates-index\/)\r\n\r\nTo follow this blog, you can use any text editor which can provide JSON syntax highlighting. We will be looking at using Visual Studio to author ARM templates in a future blog post. Visual Studio can provide JSON outlining and is a very powerful tool for authoring ARM templates.\r\n\r\nLet us assume that you want to deploy a storage account and build a virtual network in Azure. You want to automate the process and need to repeat the process in various environments. ARM templates fit the bill for the solution of this problem.\r\n\r\nIn the next few sections, we will build each section of the template and then at the end will check the complete template.\r\n\r\n### 1. Template Header ###\r\n\r\n    \"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n\r\n### 2. Parameters ###\r\n\r\n    \"parameters\": {\r\n        \"vhdStorageName\": {\r\n            \"type\": \"string\",\r\n            \"minLength\": 1,\r\n            \"defaultValue\": \"mystorage101\",\r\n            \"metadata\": {\r\n                \"description\": \"Name of the Storage Account.\"\r\n            }\r\n        },\r\n        \"virtualNetworkName\": {\r\n            \"type\": \"string\",\r\n            \"metadata\": {\r\n                \"description\": \"Name of the virtual network.\"\r\n            }\r\n        }\r\n    },\r\n\r\n### 3. Variables ###\r\n\r\n    \"variables\": {\r\n        \"addressPrefix\": \"10.0.0.0\/16\",\r\n        \"subnetName\": \"Subnet\",\r\n        \"subnetPrefix\": \"10.0.0.0\/24\",\r\n        \"vhdStorageType\": \"Standard_LRS\"\r\n    },\r\n\r\n### 4. Resources ###\r\n\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Storage\/storageAccounts\",\r\n            \"name\": \"[parameters('vhdStorageName')]\",\r\n            \"apiVersion\": \"2015-06-15\",\r\n            \"location\": \"[resourceGroup().location]\",\r\n            \"tags\": {\r\n                \"displayName\": \"StorageAccount\"\r\n            },\r\n            \"properties\": {\r\n                \"accountType\": \"[variables('vhdStorageType')]\"\r\n            }\r\n        },\r\n        {\r\n            \"apiVersion\": \"2015-06-15\",\r\n            \"type\": \"Microsoft.Network\/virtualNetworks\",\r\n            \"name\": \"[parameters('virtualNetworkName')]\",\r\n            \"location\": \"[resourceGroup().location]\",\r\n            \"tags\": {\r\n                \"displayName\": \"VirtualNetwork\"\r\n            },\r\n            \"properties\": {\r\n                \"addressSpace\": {\r\n                    \"addressPrefixes\": [\r\n                        \"[variables('addressPrefix')]\"\r\n                    ]\r\n                },\r\n                \"subnets\": [\r\n                    {\r\n                        \"name\": \"[variables('subnetName')]\",\r\n                        \"properties\": {\r\n                            \"addressPrefix\": \"[variables('subnetPrefix')]\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n\r\n### Complete Template ###\r\n\r\nHere is the complete template build from all the sections discussed above.\r\n\r\n    {\r\n        \"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentTemplate.json#\",\r\n        \"contentVersion\": \"1.0.0.0\",\r\n        \"parameters\": {\r\n            \"vhdStorageName\": {\r\n                \"type\": \"string\",\r\n                \"minLength\": 1,\r\n                \"defaultValue\": \"mystorage101\",\r\n                \"metadata\": {\r\n                    \"description\": \"Name of the Storage Account.\"\r\n                }\r\n            },\r\n            \"virtualNetworkName\": {\r\n                \"type\": \"string\",\r\n                \"metadata\": {\r\n                    \"description\": \"Name of the virtual network.\"\r\n                }\r\n            }\r\n        },\r\n        \"variables\": {\r\n            \"addressPrefix\": \"10.0.0.0\/16\",\r\n            \"subnetName\": \"Subnet\",\r\n            \"subnetPrefix\": \"10.0.0.0\/24\",\r\n            \"vhdStorageType\": \"Standard_LRS\"\r\n        },\r\n        \"resources\": [\r\n            {\r\n                \"type\": \"Microsoft.Storage\/storageAccounts\",\r\n                \"name\": \"[parameters('vhdStorageName')]\",\r\n                \"apiVersion\": \"2015-06-15\",\r\n                \"location\": \"[resourceGroup().location]\",\r\n                \"tags\": {\r\n                    \"displayName\": \"StorageAccount\"\r\n                },\r\n                \"properties\": {\r\n                    \"accountType\": \"[variables('vhdStorageType')]\"\r\n                }\r\n            },\r\n            {\r\n                \"apiVersion\": \"2015-06-15\",\r\n                \"type\": \"Microsoft.Network\/virtualNetworks\",\r\n                \"name\": \"[parameters('virtualNetworkName')]\",\r\n                \"location\": \"[resourceGroup().location]\",\r\n                \"tags\": {\r\n                    \"displayName\": \"VirtualNetwork\"\r\n                },\r\n                \"properties\": {\r\n                    \"addressSpace\": {\r\n                        \"addressPrefixes\": [\r\n                            \"[variables('addressPrefix')]\"\r\n                        ]\r\n                    },\r\n                    \"subnets\": [\r\n                        {\r\n                            \"name\": \"[variables('subnetName')]\",\r\n                            \"properties\": {\r\n                                \"addressPrefix\": \"[variables('subnetPrefix')]\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\nIn the next blog, we will learn how to deploy this template.\r\n",
		"addpost": "addpost",
		"dated": "Sep 04, 2016",
		"slug": "step-by-step-arm-templates-building-your-first-arm-template",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>In this blog post, we will use the knowledge learnt in previous blogs and will build a basic ARM template.\nIf you haven't checked previous blog posts then have a quick read of your preferred topics here: <a href=\"\/post\/step-by-step-azure-resource-manager-arm-templates-index\/\">Step by Step Azure R...<\/a><\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - Helper Functions",
		"postDate": "31-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "ARM Templates has various dynamic constructs called **Helper Functions** which can make your template more generic. These constructs reduce the hard coded values in your templates. You can use the information from this blog to make your existing templates more dynamic and start writing new templates with a much generic approach.\r\n\r\nLet's look at the most important helper functions and their practical usage one by one. \r\n\r\n### 1. Resource Id - Resource Function ###\r\n\r\nYou use this function to determine the ID of a resource. This is only used when the resource (whose ID is needed) is not being deployed in the current template and it already exists in Azure.\r\n\r\nThe generic syntax to use this is:\r\n\r\n    resourceId ([subscriptionId], [resourceGroupName], resourceType, resourceName1, [resourceName2]...)\r\n\r\nOnly required parameters of this helper function are resourceType and resourceName1.\r\n\r\nThese parameters are as follows:\r\n\r\n - subscription ID - This is only needed if you want to refer a different subscription. Default value is the current subscription\r\n - resource Group Name - Name of the resource group where the resource exists. Default is the current resource group, in which you are deploying the template\r\n - resource Type - Type of resource including resource provider namespace\r\n - resource Name 1  - Name of the resource\r\n - resource Name 2  - Next resource name segment if resource is nested. E.g. a VM Extension\r\n\r\n \r\n**Example**\r\n\r\n    \"vnetId1\": \"[resourceId('AE06-Mgmt-RG','Microsoft.Network\/virtualNetworks', parameters('virtualNetworkName'))]\",\r\n    \"vnetId2\": \"[resourceId('Microsoft.Network\/virtualNetworks', variables('virtualNetworkName'))]\"\r\n\r\nThe above example shows two ways of using the resource ID helper function to determine the Id of a virtual network. First one uses the resource group, resource type and resource name. Second example uses only the resource Type and resource name. Second example assumes the resource group to be same as the template being deployed to.\r\n\r\n### 2. Resource Group - Resource Function ###\r\n\r\nThis helper function returns an object that represents the current resource group to which the template is being deployed.\r\n\r\nThe generic syntax to use this is:\r\n\r\n    resourceGroup()\r\n\r\nNo parameters are needed in this helper function.\r\n\r\n**Example**\r\n\r\n    \"vhdStorageName\": \"[concat('vhdstorage', uniqueString(resourceGroup().id))]\",\r\n     \"storageAccountResourceGroup\": \"[resourcegroup().name]\",\r\n     \"location\": \"[resourceGroup().location]\"\r\n\r\nThe above example shows 3 uses of the resource group helper functions. First one uses the ID of the resource group, second uses the name property and third uses the location for the current resource group.\r\n\r\n### 3. Subscription - Resource Function ###\r\n\r\nThe generic syntax to use this is:\r\n\r\n    subscription()\r\n\r\nNo parameters are needed in this helper function.\r\n \r\n**Example**\r\n\r\n    \"subscriptionId\": \"[subscription().subscriptionId]\"\r\n\r\nThe above example is straightforward. It fetches the subscription Id of the current subscription.\r\n\r\n### 4. Concat - String Function ###\r\n\r\nThis function is used to concatinate (i.e. combine) two or more values.\r\n\r\nThe generic syntax to use this is:\r\n\r\n    concat (array1, array2, array3, ...)\r\n\r\nAt least 1 array is needed for concat to work. \r\n \r\n**Example**\r\n\r\n    \"subnetRef\": \"[concat(variables('vNetId'), '\/subnets\/', variables('subnetName'))]\"\r\n\r\nThe above example combines (or concatinates) 3 text values. First value is the value of variable vNetId. Second value is a string \"\/subnets\/\". Third value is the value of the variable subnet Name.\r\n\r\nThese are the most common Helper functions that you will use in 80%-90% of the templates. \r\n\r\nTo check the complete list of Helper Functions, check this official link: [Azure Resource Manager template functions](https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/resource-group-template-functions\/#resource-functions)\r\n",
		"addpost": "addpost",
		"dated": "Aug 31, 2016",
		"slug": "step-by-step-arm-templates-helper-functions",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>ARM Templates has various dynamic constructs called <strong>Helper Functions<\/strong> which can make your template more generic. These constructs reduce the hard coded values in your templates. You can use the information from this blog to make your existing templates more dynamic and start writi...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 5 - Outputs",
		"postDate": "30-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.\r\n\r\n 1. [Understanding all components](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/)\r\n 2. [Parameters](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/)\r\n 3. [Variables](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/)\r\n 4. [Resources](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/)\r\n 5. [Outputs - This blog post](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/)\r\n\r\n## Outputs ##\r\n\r\nThis section is used to output any values after the deployment of the ARM Template. This can output any Ids or connection strings based on the deployed resources. \r\n\r\nThis is a single JSON object with various output objects (just like Parameters. The overall JSON structure looks like below:\r\n\r\n    \"outputs\": { \r\n        \"output1\" : {\r\n                         \"type\":\"string\",\r\n                         \"value\": \"value1\"\r\n          },\r\n        \"output2\" : {\r\n                         \"type\":\"string\",\r\n                         \"value\": \"value2\"\r\n          },\r\n    }\r\n\r\nEach output object has 2 properties:\r\n\r\n 1. Type - Data type of the output\r\n 2. Value - value of the output\r\n\r\nA real life example with look like below:\r\n\r\n    \"outputs\": {\r\n        \"adminUsername\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[parameters('adminUsername')]\"\r\n        }\r\n    }\r\n\r\nThe above example will output the administrator Username using the parameter from the template.\r\n\r\nThat's all there is to Outputs in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.",
		"addpost": "addpost",
		"dated": "Aug 30, 2016",
		"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol><li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">U...<\/a><\/li><\/ol>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 4 - Resources",
		"postDate": "29-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.\r\n\r\n 1. [Understanding all components](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/)\r\n 2. [Parameters](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/)\r\n 3. [Variables](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/)\r\n 4. [Resources  - This blog post](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/)\r\n 5. [Outputs](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/)\r\n\r\n## Resources ##\r\n\r\nThis is the major section of the whole ARM template. This is where you define what resources should be deployed in Azure. You also define dependencies between resources in this section. \r\n\r\nThe resources section consist of an array of JSON Objects as shown below:\r\n\r\n    \"resources\": [\r\n            { },\r\n            { },\r\n    ]\r\n\r\nEach object in the array (represented via curly braces) is an Azure resource. You can deploy multiple resources in a single ARM template. E.g. You can deploy a new Storage Account, new Virtual Network and three Virtual Machines in that virtual network within a single template.\r\nWithin the object, various properties (and nested properties) are used to provide the configurations of each resource. \r\n\r\n### Elements ###\r\n\r\nDifferent elements in a single resource object can be one of the following:\r\n\r\n 1. **apiVersion** - ***Required*** - Version of the API. e.g. \"2015-06-15\"\r\n 2. **type** - ***Required*** - Type of the resource. This value is a combination of the namespace of the resource provider and the resource type that the resource provider supports. e.g. Azure Storage Account will have type as \"Microsoft.Storage\/storageAccounts\".\r\n 3. **name** - ***Required*** - Name of the resource. The name must follow URI component restrictions and also the Azure naming restrictions if any. E.g. Storage account name can only be in small letters and has to be unique.\r\n 4. **location** - Optional - Use supported geo-locations of the provided resource without any spaces. Or use the resource group's location dynamically.\r\n 5. **tags** - Optional - Tags that are associated with the resource.\r\n 6. **dependsOn** - Optional - Other resources in the same template, that the current resource being defined depends on. The dependencies between resources are evaluated and resources are deployed in their dependent order. When resources are not dependent on each other, they are attempted to be deployed in parallel. The value can be a comma-separated list of resource names or resource unique identifiers.\r\n 7. **properties** - Optional - Resource specific configuration settings. E.g. Account type property for a storage account name.\r\n 8. **resources** - Optional - Child resources that depend on the resource being defined. E.g. Extension resources for a Virtual Machine resource.\r\n\r\n### Examples ###\r\n\r\nLet's look at two examples. First, we will take a simple resource example to deploy a storage account in Azure:\r\n\r\n    {\r\n                \"type\": \"Microsoft.Storage\/storageAccounts\",\r\n                \"name\": \"[variables('vhdStorageName')]\",\r\n                \"apiVersion\": \"2015-06-15\",\r\n                \"location\": \"[resourceGroup().location]\",\r\n                \"tags\": {\r\n                    \"displayName\": \"StorageAccount\",\r\n                    \"department\" : \"Finance\",\r\n                    \"application\" : \"database\"\r\n                },\r\n                \"properties\": {\r\n                    \"accountType\": \"[variables('vhdStorageType')]\"\r\n                }\r\n            }\r\n\r\nAbove example will deploy a storage account with the name from \"vhdStorageName\" variable. It will apply 3 tags to the resource after deployment. It will use the account type (i.e. standard or premium) based on the value of the \"vhdStorageType\" variable. If you want to deploy 2 or more similar storage accounts, then just copy and paste the json for the resource, separated by comma. It will become another object in the Resources array.\r\n\r\nNow let's look at a complex and larger example of deploying a single virtual machine with one extension for Diagnostics.\r\n\r\n        {\r\n            \"apiVersion\": \"2015-06-15\",\r\n            \"type\": \"Microsoft.Compute\/virtualMachines\",\r\n            \"name\": \"[variables('vmName')]\",\r\n            \"location\": \"[resourceGroup().location]\",\r\n            \"tags\": {\r\n                \"displayName\": \"VirtualMachine\"\r\n            },\r\n            \"dependsOn\": [\r\n                \"[concat('Microsoft.Storage\/storageAccounts\/', variables('vhdStorageName'))]\",\r\n                \"[concat('Microsoft.Network\/networkInterfaces\/', variables('nicName'))]\"\r\n            ],\r\n            \"properties\": {\r\n                \"hardwareProfile\": {\r\n                    \"vmSize\": \"[variables('vmSize')]\"\r\n                },\r\n                \"osProfile\": {\r\n                    \"computerName\": \"[variables('vmName')]\",\r\n                    \"adminUsername\": \"[parameters('adminUsername')]\",\r\n                    \"adminPassword\": \"[parameters('adminPassword')]\"\r\n                },\r\n                \"storageProfile\": {\r\n                    \"imageReference\": {\r\n                        \"publisher\": \"[variables('imagePublisher')]\",\r\n                        \"offer\": \"[variables('imageOffer')]\",\r\n                        \"sku\": \"[parameters('windowsOSVersion')]\",\r\n                        \"version\": \"latest\"\r\n                    },\r\n                    \"osDisk\": {\r\n                        \"name\": \"osdisk\",\r\n                        \"vhd\": {\r\n                            \"uri\": \"[concat('http:\/\/', variables('vhdStorageName'), '.blob.core.windows.net\/', variables('vhdStorageContainerName'), '\/', variables('OSDiskName'), '.vhd')]\"\r\n                        },\r\n                        \"caching\": \"ReadWrite\",\r\n                        \"createOption\": \"FromImage\"\r\n                    }\r\n                },\r\n                \"networkProfile\": {\r\n                    \"networkInterfaces\": [\r\n                        {\r\n                            \"id\": \"[resourceId('Microsoft.Network\/networkInterfaces', variables('nicName'))]\"\r\n                        }\r\n                    ]\r\n                },\r\n                \"diagnosticsProfile\": {\r\n                    \"bootDiagnostics\": {\r\n                        \"enabled\": true,\r\n                        \"storageUri\": \"[concat('http:\/\/', variables('diagnosticsStorageAccountName'), '.blob.core.windows.net')]\"\r\n                    }\r\n                }\r\n            },\r\n            \"resources\": [\r\n                {\r\n                    \"type\": \"extensions\",\r\n                    \"name\": \"Microsoft.Insights.VMDiagnosticsSettings\",\r\n                    \"apiVersion\": \"2015-06-15\",\r\n                    \"location\": \"[resourceGroup().location]\",\r\n                    \"tags\": {\r\n                        \"displayName\": \"AzureDiagnostics\"\r\n                    },\r\n                    \"dependsOn\": [\r\n                        \"[concat('Microsoft.Compute\/virtualMachines\/', variables('vmName'))]\"\r\n                    ],\r\n                    \"properties\": {\r\n                        \"publisher\": \"Microsoft.Azure.Diagnostics\",\r\n                        \"type\": \"IaaSDiagnostics\",\r\n                        \"typeHandlerVersion\": \"1.5\",\r\n                        \"autoUpgradeMinorVersion\": true,\r\n                        \"settings\": {\r\n                            \"xmlCfg\": \"[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), variables('wadcfgxend')))]\",\r\n                            \"storageAccount\": \"[variables('diagnosticsStorageAccountName')]\"\r\n                        },\r\n                        \"protectedSettings\": {\r\n                            \"storageAccountName\": \"[variables('diagnosticsStorageAccountName')]\",\r\n                            \"storageAccountKey\": \"[listkeys(variables('accountid'), '2015-06-15').key1]\",\r\n                            \"storageAccountEndPoint\": \"https:\/\/core.windows.net\"\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n\r\nNote that the above code snippet defines a single virtual machine. Let us decode various sections of this complex resource:\r\n\r\n - It begins with simple properties like apiVersion, type, name, location and tags as discussed in the previous example. These are straightforward and thus values are provided to these attributes.\r\n - Next is the **dependsOn** section. This defines the dependency between resources. In the above example, the virtual machine resource is dependent on the storage account and a network interface, which are also defined in the template. These 2 resources will be created before the virtual machine creation\/deployment. If these resources are not created in the template then it will check for the presence of these resources in the current subscription. If they are not present the template will not get deployed and will error out.\r\n - Next are various **properties** to configure the Virtual machine, like hardware profile, os profile, storage profile, os disk, network profile, diagnostics profile etc.\r\n - Next, we have additional **sub-resources**. These are Azure resources which will be created and linked to the current resource. Only one sub-resource is created in the above example which is an extension for VM diagnostics settings.\r\n\r\nThat's all there is to Resources in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.",
		"addpost": "addpost",
		"dated": "Aug 29, 2016",
		"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol><li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">U...<\/a><\/li><\/ol>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 3 - Variables",
		"postDate": "28-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.\r\n\r\n 1. [Understanding all components](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/)\r\n 2. [Parameters](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/)\r\n 3. [Variables - This blog post](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/)\r\n 4. [Resources](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/)\r\n 5. [Outputs](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/)\r\n\r\n## Variables ##\r\n\r\nVariables are values that you either know beforehand or you can construct from the input parameters. These variables can then be reused at multiple locations in the resources section. If you later want to change the value of a variable then it automatically gets updated at all other locations. They can be used to define a resource property.\r\n\r\n### Defining Variables ###\r\n\r\nVariable is a one huge JSON object. Each property can be one of the simple data type (like integer, bool, string etc.) or can be another complex JSON object. The general structure is as shown below:\r\n\r\n    \"variables\": {\r\n          \"variable 1\" : \"value 1\",\r\n          \"variable 2\" : \"value 2\",\r\n          \"variable 3\" : 1024,\r\n          \"variable 4\" : {}\r\n    }\r\n\r\nNote that in the above example, the first 3 variables are of simple value type. The 4rth variable is however of a complex JSON object type.\r\n\r\nLet's now check a real variables section from an actual ARM template:\r\n\r\n    \"variables\": {\r\n            \"vmSize\": \"Standard_A2\",\r\n            \"virtualNetworkName\": \"MyVNETName\",\r\n            \"vnetId1\": \"[resourceId('Microsoft.Network\/virtualNetworks', variables('virtualNetworkName'))]\",\r\n            \"vnetId2\": \"[resourceId(parameters('vNetRG'),'Microsoft.Network\/virtualNetworks',parameters('virtualNetworkName'))]\",\r\n            \"subnetRef\": \"[concat(variables('vnetId'), '\/subnets\/', variables('subnetName'))]\",\r\n            \"vhdStorageName\": \"[concat('vhdstorage', uniqueString(resourceGroup().id))]\",\r\n            \"storageAccountResourceGroup\": \"[resourcegroup().name]\",\r\n            \"location\": \"[resourceGroup().location]\",\r\n            \"subscriptionId\": \"[subscription().subscriptionId]\"\r\n        }\r\n\r\nThere are lots of key constructs in the above code snippet. I have tried to capture as many different constructs in this snippets as I could. Let us decode each variable one by one.\r\n\r\n 1. vmSize - Simple String\r\n 2. virtualNetworkName - Simple string name\r\n 3. vnetId1 - This uses a special function named \"**resourceId**\" to find out the resource ID of the virtual network. This function is invoked by using the syntax `\"[resourceId(Input)]\"` .  This gets the resource ID of a resource which is defined by the Input to this. Also, note the use of another variable as an input to this.\r\n 4. vnetId2 - This also fetches the resource Id of a virtual network using \"resourceId\" method. Note the use of the value of a parameter in this to find out Resource Group of the existing Virtual network (parameter \"vNetRG\").\r\n 5. subnetRef - This variable uses another function \"**concat**\" in ARM template i.e. `\"[concat(input1,input2,...)]\"`. This function can take many inputs and will concatinate (i.e. club together) the value of all the inputs provided. You can use parameters or another variable.\r\n 6. vhdStorageName - This also uses concat function to dynamically generate a storage name. However it uses \"**resourcegroup**\" function as `\"[resourcegroup()]\"`. This function always returns the resource group to which you are deploying the current ARM template. Then the variable uses the id property of the resource group returned.\r\n 7. storageAccountResourceGroup - This uses the \"name\" property of the current resource group\r\n 8. location - This uses the \"location\" property of the current resource group.\r\n 9. subscriptionId - This uses the \"**subscription**\" function as `\"[subscription()]\"` to find out the current subscription to which the current ARM template is being deployed.  Then it uses the subscription Id property of the subscription to get the required Id.\r\n\r\nNote that these constructs are very powerfull and can be used to dynamically construct your ARM template. These constructs are also known as Helper Functions and are explained in detail here: [Step by Step ARM Templates - Helper Functions](..\/step-by-step-arm-templates-helper-functions\/)\r\n\r\n### Using Variables ###\r\n\r\nUsing variables is very easy and is similar to using parameters. In fact, you already saw the usage of variables above, while defining other variables.\r\n\r\nYou use the square parenthesis to indicate to the ARM engine to evaluate whatever is inside the parenthesis. You use the \"variable\" keyword and then you pass the name of the variable as input. Check the example below.\r\n\r\n    \"storageAccountName\": \"[variables('storageAccountName')]\"\r\n\r\n### Best Practices ###\r\n\r\nBest practices are similar to the Parameters.\r\n\r\n - Provide complete descriptive names, no matter how long.\r\n - Use **Pascal Casing** to name your parameters. i.e. First letter should be a small letter. Then every new word will have the first letter as a capital. No space between words. E.g. storageAccountName\r\n - Use the constructs explained in the previous section to dynamically generate variables. This reduces any human errors.\r\n - Anything that is used more than once and is not required to be entered by an end user, should be created as a variable. Later on, this helps by minimizing the number of places you need to change the value.\r\n\r\nThat's all there is to Variables in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.",
		"addpost": "addpost",
		"dated": "Aug 26, 2016",
		"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol><li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">U...<\/a><\/li><\/ol>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding Components 2 - Parameters",
		"postDate": "22-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.\r\n\r\n 1. [Understanding all components](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/)\r\n 2. [Parameters - This blog post](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/)\r\n 3. [Variables](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/)\r\n 4. [Resources](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/)\r\n 5. [Outputs](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/)\r\n\r\n## Parameters ##\r\nAs mentioned earlier, parameters are the way to customize the templates, each time you deploy it to create resources in Azure. These parameters are the end-user inputs for various aspects of the template. E.g. If you are deploying an Azure Virtual Machine via an ARM Template then the name of the VM can be an input parameter. Operating System type can be another parameter.\r\n\r\nThe parameters can be referred and used in other parts of the ARM Template.\r\n\r\n### 1. Defining Parameters ###\r\nParameters is a one huge JSON object with multiple JSON properties. Each property is one parameter which is represented as another JSON object. Let us look at its structure at a high level.\r\n\r\n    \"parameters\": {\r\n                   \"parameter 1\" : {},\r\n                   \"parameter 2\" : {},\r\n                   \"parameter 3\" : {}\r\n    }\r\n\r\nE.g. If you are creating a template to deploy a Windows Virtual Machine then the parameters will look something like below:\r\n\r\n    \"parameters\": {\r\n                   \"VMName\" : {},\r\n                   \"AdminUserName\" : {},\r\n                   \"AdminPassword\" : {},\r\n                   \"WindowsOSVersion\" : {}\r\n    }\r\n\r\nNow let us look at one of the parameters. E.g. The AdminUserName parameter will look like:\r\n\r\n    \"adminUsername\": {\r\n                \"type\": \"string\",\r\n                \"minLength\": 1,\r\n                \"metadata\": {\r\n                    \"description\": \"Username for the Virtual Machine.\"\r\n                }\r\n            }\r\n\r\nThe parameter object, as shown above, has following parts:\r\n 1. **Type** - This is the data Type of the parameter.\r\n 2. **minLength** - This is the minimum length the parameter must have\r\n 3. **Metadata** - This is just to provide a description as to what the parameter means.\r\n\r\nThe **Data Type** allowed for the parameter are:\r\n\r\n - string or secureString \u2013 any valid JSON string\r\n - int \u2013 any valid JSON integer\r\n - bool \u2013 any valid JSON boolean \r\n - object \u2013 any valid JSON object \r\n - array \u2013 any valid JSON array\r\n\r\nA more complex parameter e.g. Windows OS Version, with few more properties, is shown below:\r\n\r\n    \"windowsOSVersion\": {\r\n                \"type\": \"string\",\r\n                \"defaultValue\": \"2012-R2-Datacenter\",\r\n                \"allowedValues\": [\r\n                    \"2008-R2-SP1\",\r\n                    \"2012-Datacenter\",\r\n                    \"2012-R2-Datacenter\"\r\n                ],\r\n                \"metadata\": {\r\n                    \"description\": \"The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter.\"\r\n                }\r\n            }\r\n\r\nIt has additional below properties:\r\n\r\n 1. **Default Value** - This is the default value. End User will be able to change this value when deploying the template. If no value is provided then this value is picked.\r\n 2. **Allowed Values** - This is an Array of values which are allowed for the parameter. Only value from this set is allowed as an input.\r\n\r\n### 2. Using Parameters ###\r\n\r\nUsing parameters is easy. Wherever in your template (in variables or resources section) you want to use the value of a parameter, just use the parameter function as shown below with the name of the parameter as input, enclosed in square brackets. \r\n\r\n    [parameters('windowsOSVersion')]\r\n\r\nIf the parameter value is assigned to a property, enclosing it in double quotes, as shown below:\r\n\r\n    \"sku\": \"[parameters('windowsOSVersion')]\"\r\n\r\n### 3. Best Practices ###\r\n\r\n - Try to always provide Default Values\r\n - Provide metadata so that you can provide insight as to what the parameter is meant for\r\n - Provide complete descriptive names, no matter how long.\r\n - Use **Pascal Casing** to name your parameters. i.e. First letter should be a small letter. Then every new word will have the first letter as a capital. No space between words. E.g. windowsOSVersion\r\n - Use properties like minLength and Allowed values to impose restrictions. This reduces any human errors.\r\n\r\nThat's all there is to Parameters in ARM Templates. If you have any doubts, please comment in the below section. Use the links at the Top to know all about other components in an ARM Template.",
		"addpost": "addpost",
		"dated": "Aug 24, 2016",
		"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>If you haven't checked the previous blog on the overall structure of the ARM template, I suggest you give it a quick read before checking the component described in this post in detail.<\/p>\n<ol><li><a href=\"..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components\/\">U...<\/a><\/li><\/ol>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - What is in an ARM Template - Understanding All Components",
		"postDate": "23-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates"
		],
		"category": "Azure",
		"body": "As we discussed [earlier in the introduction](..\/step-by-step-azure-resource-manager-arm-templates-index\/) **Azure Resource Manager (ARM) Template** is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also defines the dependencies between the deployed resources.\r\n\r\nIn this post, we will deconstruct any basic ARM template and will understand it's various components.\r\n\r\nAny ARM Template will look like below:\r\n\r\n    {\r\n        \"$schema\": \"https:\/\/schema.management.azure.com\/schemas\/2015-01-01\/deploymentTemplate.json#\",\r\n        \"contentVersion\": \"1.0.0.0\",\r\n        \"parameters\": {},\r\n        \"variables\": {},\r\n        \"resources\": [ {}, {} ]\r\n    }\r\n\r\nSnapshot of the Template at root level, as generated via Visual Studio:\r\n\r\n![ARM Template Components][1]\r\n\r\n\r\n\r\nAs you can see the components (or properties) of any ARM template includes:\r\n\r\n 1. Schema\r\n 2. Content Version\r\n 3. Parameters\r\n 4. Variables\r\n 5. Resources\r\n\r\nLet's look at these in more detail.\r\n\r\n <table border=\"1\" cellpadding=\"4\" cellspacing=\"4\">\r\n        <colgroup>\r\n            <col>\r\n            <col>\r\n            <col>\r\n            <col>\r\n        <\/colgroup>\r\n        <tbody valign=\"top\">\r\n            <tr>\r\n                <th>Element name<\/th>\r\n                <th>Required<\/th>\r\n                <th>JSON Type<\/th>\r\n                <th>Description<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>$schema<\/td>\r\n                <td>Yes<\/td>\r\n                <td>String Value<\/td>\r\n                <td>Location of the JSON schema file that describes the version of the template language.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>contentVersion<\/td>\r\n                <td>Yes<\/td>\r\n                <td>String Value<\/td>\r\n                <td>Version of the template (such as 1.2.0.20). When deploying resources using the template, this value can be used to make sure that the right template is being used.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>parameters<\/td>\r\n                <td>No<\/td>\r\n                <td>JSON Object<\/td>\r\n                <td>Values that are provided by the end user (manually or via a parameters file) when deployment is executed to customize resource deployment.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>variables<\/td>\r\n                <td>No<\/td>\r\n                <td>JSON Object<\/td>\r\n                <td>Values that are reused multiple times in the template. You can update these values. They are different from Parameters as their value is known and they are not required as inputs from the end user.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>resources<\/td>\r\n                <td>Yes<\/td>\r\n                <td>Array of Objects<\/td>\r\n                <td>Types of services that are deployed or updated in a resource group. Each JSON object in this Array denotes an Azure Resource.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>outputs<\/td>\r\n                <td>No<\/td>\r\n                <td>JSON Object<\/td>\r\n                <td>Values that are returned after deployment.<\/td>\r\n            <\/tr>\r\n        <\/tbody>\r\n<\/table>\r\n\r\nNow that you know what each part is at a high level, in the next posts, we will look at the key 4 components in detail.\r\n\r\n 1. [Parameters](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-2-parameters\/)\r\n 2. [Variables](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-3-variables\/)\r\n 3. [Resources](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-4-resources\/)\r\n 4. [Outputs](..\/step-by-step-arm-templates-what-is-in-an-arm-template-understanding-components-5-outputs\/)\r\n\r\n  [1]: http:\/\/HarvestingClouds.com\/images\/147520488857edd71873f9b.png",
		"addpost": "addpost",
		"dated": "Aug 22, 2016",
		"slug": "step-by-step-arm-templates-what-is-in-an-arm-template-understanding-all-components",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>As we discussed <a href=\"..\/step-by-step-azure-resource-manager-arm-templates-index\/\">earlier in the introduction<\/a> <strong>Azure Resource Manager (ARM) Template<\/strong> is a JavaScript Object Notation (JSON) file that defines one or more resources to deploy to a resource group. It also define...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Step by Step ARM Templates - JSON 101 for IT Administrators",
		"postDate": "17-08-2016",
		"tags": [
			"ARM",
			"Azure",
			"AzureResourceManager",
			"Templates",
			"JSON"
		],
		"category": "Azure",
		"body": "Azure Resource Manager (ARM) templates are written in JSON or **JavaScript Object Notation**. To understand ARM templates, you need to understand few quick basics about JSON. These will enable you to lay a great foundation which will enable you to understand ARM templates very easily.\r\n\r\nJSON or JavaScript Object Notation (pronounce like \"Jay-son\") is a text-based data format that's designed to be human-readable, lightweight, and easy to transmit between a server and a web client. Its syntax is derived from JavaScript. Think of this as an even more compact version of XML files.\r\n\r\nJSON is a popular notation for transmitting data through RESTful web services. The official internet media type for JSON is `application\/json`, and JSON files typically have a `.json` extension.\r\n\r\nTo understand JSON we need to understand **3 main components**. These components are like building blocks, using which you can build very complex JSON files.\r\n\r\n\r\n## 1. Objects ##\r\n\r\nObjects are the heart of JSON. Object denotes a real life object, e.g. an Employee. Just like a real life object, these have various properties and a value for each of these properties. E.g. An Employee will have Name property with value as John. Further, an employee object can have various another properties like Age, Salary, Department etc. So to denote an object in JSON you:\r\n\r\n - One object will be represented by curly brackets. It will begin from opening curly bracket i.e. `{` and will end at closing curly bracket i.e. `}`\r\n - Denote the property and corresponding values as `\"key\" : \"value\"` or `\"property\" : \"value\"` pairs.\r\n - You can only use double quotes for Properties as they will always be of type string\r\n - You will have double quotes around Values if they are of string type. You will not have any quotes in case of a number or a boolean value.\r\n - Each property will be separated from next property by a comma\r\n\r\n**Note:** Each JSON file is also a single JSON object. At root level it starts with an opening curly bracket i.e. `{` and will end with closing curly bracket i.e. `}`. There can't be any other objects at the root level. Think of this similar to how in an XML file there can be only one element at the root level. \r\n\r\nExample Employee object is shown below:\r\n\r\n    {\r\n        \"Name\" : \"John\",\r\n        \"Age\" : 34,\r\n        \"Department\" : \"Finance\",\r\n        \"Salary\" : \"100000\",\r\n        \"IsAdmin\" : true\r\n    }\r\n\r\n## 2. Arrays ##\r\n\r\nSimply put, arrays are a collection of items. In JSON the **square brackets** represents an Array. E.g. An array of 3 employees will look like below:\r\n\r\n    [\r\n      {\r\n            \"Name\" : \"John\",\r\n            \"Age\" : 34\r\n        },\r\n       {\r\n            \"Name\" : \"Mary\",\r\n            \"Age\" : 32\r\n        },\r\n       {\r\n            \"Name\" : \"Matthew\",\r\n            \"Age\" : 29\r\n        }\r\n    ]\r\n\r\n## 3. Nesting of Objects ##\r\nNow things get more interesting with nesting of Objects. What Nesting means is that one object can have it's property as another complex object. Don't worry if that sounds confusing. Let's understand that statement using an example. An Address where a person lives can be represented by an object. This object will look like below:\r\n\r\n    {\r\n      \"StreetNumber\" : \"50\",\r\n      \"StreetName\" : \"Brian Harrison Way\",\r\n      \"Unit Number\" : 22,\r\n      \"City\" : \"Toronto\",\r\n      \"Country\" : \"Canada\"\r\n    }\r\nNow an Employee Object will have an Address object as one of it's property (because employee need to live somewhere). This new complex Employee object will look like below, with nested Address object as one of it's property:\r\n\r\n     {\r\n            \"Name\" : \"John\",\r\n            \"Age\" : 34,\r\n            \"Department\" : \"Finance\",\r\n            \"Salary\" : \"100000\",\r\n            \"IsAdmin\" : true,\r\n            \"Address\" :   {\r\n                              \"StreetNumber\" : \"50\",\r\n                              \"StreetName\" : \"Brian Harrison Way\",\r\n                              \"Unit Number\" : 22,\r\n                              \"City\" : \"Toronto\",\r\n                              \"Country\" : \"Canada\"\r\n                           }\r\n        }\r\n\r\nThat's all there is to it. Now you can use these 3 components and build very complex json files\/templates. Even the most complex template can be broken into these 3 components. \r\n\r\nBelow is a complex example with all 3 components. \r\n\r\n    {\r\n        \"Department\": \"Finance\",\r\n        \"TotalEmployees\": 2,\r\n        \"Employees\": [\r\n            {\r\n                \"Name\": \"John\",\r\n                \"Age\": 34,\r\n                \"Department\": \"Finance\",\r\n                \"Salary\": \"100000\",\r\n                \"IsAdmin\": true,\r\n                \"Address\": {\r\n                    \"StreetNumber\": \"50\",\r\n                    \"StreetName\": \"Brian Harrison Way\",\r\n                    \"Unit Number\": 22,\r\n                    \"City\": \"Toronto\",\r\n                    \"Country\": \"Canada\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"John\",\r\n                \"Age\": 34,\r\n                \"Department\": \"Finance\",\r\n                \"Salary\": \"100000\",\r\n                \"IsAdmin\": true,\r\n                \"Address\": {\r\n                    \"StreetNumber\": \"50\",\r\n                    \"StreetName\": \"Brian Harrison Way\",\r\n                    \"Unit Number\": 22,\r\n                    \"City\": \"Toronto\",\r\n                    \"Country\": \"Canada\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\nThe above JSON object denotes one department with name as Finance and total number of employees as 2. Then the \"Employees\" object is an array of 2 emplyees. Each emplyee object further have a complex property as Address, which is another object. \r\n\r\nIf you understood each of the 3 components, you should be able to build\/understand most complex JSON files with ease.",
		"savedraft": "savedraft",
		"dated": "Aug 17, 2016",
		"slug": "step-by-step-arm-templates-json-101-for-it-administrators",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Azure Resource Manager (ARM) templates are written in JSON or <strong>JavaScript Object Notation<\/strong>. To understand ARM templates, you need to understand few quick basics about JSON. These will enable you to lay a great foundation which will enable you to understand ARM templates very easily...<\/p>\n",
		"addpost": "addpost",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "ASR Setup for VMs running in VMWare without VMware level User Access",
		"postDate": "27-07-2016",
		"tags": [
			"ASR",
			"Azure",
			"AzureSiteRecovery",
			"VMWare"
		],
		"category": "Azure",
		"body": "### Problem Statement\r\nRecently I was setting up **Azure Site Recovery** (or ASR) in an environment. We had multiple VMs in VMWare environment. The environment was managed by Third Party who did not want to give any service account for VMWare as their environment was shared with different customers. So we had access only to the VMs. Without relevant access, ASR for VMWare was out of the question for us.\r\n\r\n### Solution\r\nWe treated the VMs, in such environment, as physical machines when setting up ASR to replicate these machines to Azure. \r\nWe used the option of \"***Not virtualized\/other***\" in the \"***Prepare Infrastructure***\" wizard of ASR. We **treated the VMs as physical servers** and did not face any issues during the migration. \r\n\r\nRefer below screenshot for the exact option discussed above.\r\n\r\n![Protection Goal][1]\r\n\r\n\r\nLater when enabling the Replication for any Server, run the \"***Enable Replication***\" wizard by clicking on \"**+Replicate**\" on the ASR vault's blade. Then select \"**Machine Type**\" as \"***Physical Machine***\" and add the Physical Machines by mentioning their IP addresses. \r\n\r\n**Note:** For this approach to work, the Configuration server should be on the same network as the VM being considered as Physical Machine.\r\n\r\n\r\nWe were able to migrate many servers successfully and without any issues using this approach.\r\n\r\n\r\n  [1]: http:\/\/HarvestingClouds.com\/images\/14696297155798c513ea908.png",
		"addpost": "addpost",
		"dated": "Jul 26, 2016",
		"slug": "asr-setup-for-vms-running-in-vmware-without-vmware-level-user-access",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<h3>Problem Statement<\/h3>\n<p>Recently I was setting up <strong>Azure Site Recovery<\/strong> (or ASR) in an environment. We had multiple VMs in VMWare environment. The environment was managed by Third Party who did not want to give any service account for VMWare as their environment was shared with ...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Uploading and Downloading files securely from Azure Storage Blob via PowerShell",
		"postDate": "18-05-2016",
		"tags": [
			"azure",
			"powershell",
			"storage",
			"blob"
		],
		"category": "Azure",
		"body": "**Azure blob storage** can provide a very highly available way to store your files in the cloud. You can dynamically add or remove the files in an automated fashion. These files can then be used for any number of purposes. E.g. A parameter file for ARM template can be kept in Azure blob storage and then dynamically read while creating resources from an ARM template.\r\n\r\n**The whole process can be broken down into 3 parts**:\r\n\r\n 1. Generating the context to the storage container\r\n 2. Uploading the files using the context\r\n 3. Downloading the files using the context\r\n\r\n### 1. Generating the context to the storage container\r\nThe context to the storage blob container can be created in one of the 3 ways, based on your security requirements. All methods use the `New-AzureStorageContext` cmdlet to generate the storage context. The methods differ on how you pass the parameters to this cmdlet.\r\n\r\n**A. Via fetching the Azure Storage Key**\r\n\r\nThis first method uses the `Get-AzureStorageKey` to fetch the storage key. This key is then used to generate the context as shown below.\r\n\r\n    $StorageAccountName = \"yourstorageaccount\"\r\n    $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r\n    $Ctx = New-AzureStorageContext $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r\n\r\n**B. Via fetching the Azure Storage Container SAS Token**\r\n\r\nThis second method uses the `New-AzureStorageContainerSASToken` to create a new SAS token to securely access the storage container. This token is then used to generate the context as shown below.\r\n\r\n    $sasToken = New-AzureStorageContainerSASToken -Container abc -Permission rl\r\n    $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -SasToken $sasToken\r\n\r\n**C. Via Connectin String**\r\n\r\nThis third method uses a connection string, entered manually, which is then used to generate the context as shown below.\r\n\r\n    $ConnectionString = \"DefaultEndpointsProtocol=http;BlobEndpoint=<blobEndpoint>;QueueEndpoint=<QueueEndpoint>;TableEndpoint=<TableEndpoint>;AccountName=<AccountName>;AccountKey=<AccountKey>\"\r\n    $Ctx = New-AzureStorageContext -ConnectionString $ConnectionString\r\n\r\n### 2. Uploading the files using the context\r\n\r\nNow that you have the context to the storage account you can upload and download files from the storage blob container.\r\nUse the below code to upload a file named \"_Parameters.json_\", located on the local machine at \"_C:\\Temp_\" directory.\r\n\r\n    #Uploading File\r\n    $BlobName = \"Parameters.json\"\r\n    $localFile = \"C:\\Temp\\\" + $BlobName\r\n\r\n    #Note the Force switch will overwrite if the file already exists in the Azure container\r\n    Set-AzureStorageBlobContent -File $localFile -Container $ContainerName -Blob $BlobName -Context $Ctx -Force\r\n\r\n### 3. Downloading the files using the context\r\n\r\nDownload works in almost identical manner. You use the Get cmdlet instead of Set as shown below to download a file to a local folder, located at \"_C:\\Downloads_\".\r\n\r\n    #Download File\r\n    $BlobName = \"Parameters.json\"\r\n    $localTargetDirectory = \"C:\\Downloads\"\r\n\r\n    Get-AzureStorageBlobContent -Blob $BlobName -Container $ContainerName -Destination $localTargetDirectory -Context $ctx\r\n\r\nI hope this helps simplify the automated usage of Azure Storage container. Let us know your concerns or questions if any.\r\n\r\n\r\n**Reference:** <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/storage-powershell-guide-full\/\" target=\"_blank\">Using Azure PowerShell with Azure Storage<\/a>",
		"addpost": "addpost",
		"dated": "May 18, 2016",
		"slug": "uploading-and-downloading-files-securely-from-azure-storage-blob-via-powershell",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p><strong>Azure blob storage<\/strong> can provide a very highly available way to store your files in the cloud. You can dynamically add or remove the files in an automated fashion. These files can then be used for any number of purposes. E.g. A parameter file for ARM template can be kept in Azure b...<\/p>\n"
	},
	{
		"author": "@20aman",
		"title": "Azure comes to Canada (along with Office 365)",
		"postDate": "16-05-2016",
		"tags": [
			"azure",
			"datacenter"
		],
		"category": "Azure",
		"body": "Last week marked the general availability of Azure datacenter for Canada locations. Also Office 365 has been released last week. Microsoft has set up 2 new datacenters in Canada. \r\n\r\n### Where Exactly are these datacenters located\r\n\r\n 1. **Canada Central** - The first datacenter is located in Toronto.\r\n 2. **Canada East** - The second datacenter is located in Quebec City.\r\n\r\nNow when you are creating a new resource (like a Virtual Machine) you will see these two options.\r\n\r\n![New Locations](http:\/\/HarvestingClouds.com\/images\/1463686879573e16df4f64c.png)\r\n\r\nCheck out the brief announcement video by **Janet Kennedy**, President of Microsoft Canada:\r\n<iframe src=\"https:\/\/channel9.msdn.com\/Blogs\/CANITPRO\/The-Microsoft-Canada-Cloud-is-Open-for-Business\/player\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"><\/iframe>\r\n\r\n### Key Resources:\r\n\r\n - These locations are also listed in the official Microsoft Regions list here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/regions\/#services?WT.mc_id=azurebg_email_Trans_1106_Tier2_Release_MOSP\" target=\"_blank\">Azure Regions<\/a>\r\n - Various resources and information for cloud in Canada are available here at <a href=\"https:\/\/www.microsoft.com\/en-ca\/sites\/datacentre\/default.aspx\" target=\"_blank\">Cloud Accelerate site for Canada<\/a>.\r\n - You can read about this announcement and upcoming features here: <a href=\"https:\/\/azure.microsoft.com\/en-us\/blog\/microsoft-cloud-accelerates-in-canada-and-expands-to-south-korea\/?WT.mc_id=azurebg_email_Trans_1106_Tier2_Release_MOSP\" target=\"_blank\">Microsoft Cloud accelerates in Canada and expands to South Korea<\/a>",
		"addpost": "addpost",
		"dated": "May 16, 2016",
		"slug": "azure-comes-to-canada-along-with-office-365",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Last week marked the general availability of Azure datacenter for Canada locations. Also Office 365 has been released last week. Microsoft has set up 2 new datacenters in Canada. <\/p>\n<h3>Where Exactly are these datacenters located<\/h3>\n<ol><li><strong>Canada Central<\/strong> - The first datacen...<\/li><\/ol>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "NEW Feature - Azure Cool Blob Storage",
		"postDate": "02-05-2016",
		"tags": [
			"announcement",
			"azure",
			"storage"
		],
		"category": "Azure",
		"body": "Have you heard about the new **Azure Cool Blob Storage**? \r\n\r\nIf you haven\u2019t heard about it, this is Microsoft's low-cost storage for **Cool** object data. \u201cExample use cases for cool storage include backups, media content, scientific data, compliance and archival data. In general, any data which lives for a longer period of time and is accessed less than once a month is a perfect candidate for cool storage.\u201d It is similar to what **Glacier storage tier** provides in Amazon Web Services.\r\n\r\n - **Pricing:** Its cost is as low as $0.01\/GB.\r\n - **Availability:** 99% (as compared to 99.9% for Hot Storage). With Read-access geo-redundant storage (or RA-GRS) the SLA is 99.9% (as compared to 99.99% for Hot).\r\n - **Deciding which AccessTier to use:** If the objects in the storage account will be more frequently accessed, then go with **Hot Tier**. Select the **Cold Tier** for infrequently accessed data.\r\n\r\nNow when you go to New -> \"Data + Storage\" -> Storage Account, and try to create a Blob Storage account then you can select from one of the options for **Access Tier** from Cold or Hot tier. \r\n\r\n![Storage Tiers][1]\r\n\r\nAlso, note that at the time of this writing, Blob storage account is **only available in these locations**: Central US, East US 2, North Central US, North Europe, West Europe, Southeast Asia, Japan East, Japan West, Central India, South India, West India.\r\n\r\n**Resources to know more:**  \r\n\r\n - <a href=\"https:\/\/azure.microsoft.com\/en-us\/blog\/introducing-azure-cool-storage\/\" target=\"_blank\">Official Announcement<\/a>\r\n - <a href=\"https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/storage-blob-storage-tiers\/\" target=\"_blank\">Getting started guide<\/a>\r\n\r\n\r\n  [1]: http:\/\/HarvestingClouds.com\/images\/146232375357294a2980ece.png",
		"addpost": "addpost",
		"dated": "May 02, 2016",
		"slug": "new-feature-azure-cool-blob-storage",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Have you heard about the new <strong>Azure Cool Blob Storage<\/strong>? <\/p>\n<p>If you haven&rsquo;t heard about it, this is Microsoft's low-cost storage for <strong>Cool<\/strong> object data. &ldquo;Example use cases for cool storage include backups, media content, scientific data, compliance and...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Taking Automatic Remediation Action on Azure VM Alert Generation",
		"postDate": "27-04-2016",
		"tags": [
			"automation",
			"azure",
			"azureautomation",
			"virtualmachine",
			"vm"
		],
		"category": "Azure",
		"body": "Using a new feature in Azure, now you can easily configure to trigger an Azure Automation Runbook when an Alert is triggered on an Azure Virtual Machine to take a remediation action. To leverage this feature all you need to do is link the alert on Azure VM to an already existing Azure Automation Runbook.\r\n\r\n > Note: This feature is supported only for the V2 Virtual Machines, i.e. the VMs created using ARM portal.\r\n\r\nTo access this feature open your Virtual Machine. Then go to the Manage alerts section in the Settings:\r\n\r\n![Setting - Manage alerts][1]\r\n\r\nThen open an existing alert or click on \"Add alert\" to create a new one. Specify the criteria for the alert. Scroll down to the bottom and you can view the new section to link the alert to an Automation Runbook.\r\n\r\n![Automation Runbook for Alert][2]\r\n\r\n###Under the hood\r\nThe alert will send data to your Runbook in a special format. Your Runbook should be expecting this. Under the hood this happens via WebHooks. The alert data is passed via a HTTP POST request. The Automation webhook service extracts the alert data from the POST request and passes it to the runbook in a parameter called **\"WebhookData\"**. The Runbook will look like below:\r\n\r\n    [OutputType(\"PSAzureOperationResponse\")]\r\n    \r\n    param ( [object] $WebhookData )\r\n    \r\n    if ($WebhookData)\r\n    {\r\n        # Get the data object from WebhookData\r\n        $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)\r\n\r\n        #Rest of the script comes here\r\n    }\r\n\r\n**In Nutshell**, now you can now trigger Azure Automation Runbooks to take remediation actions on Virtual Machines in case an alert is triggered. \r\n\r\n**Reference with complete Runbook sample:** [Azure Automation solution - remediate Azure VM alerts](https:\/\/azure.microsoft.com\/en-us\/documentation\/articles\/automation-azure-vm-alert-integration\/)\r\n\r\n\r\n  [1]: http:\/\/HarvestingClouds.com\/images\/14618976705722c9c653752.png\r\n  [2]: http:\/\/HarvestingClouds.com\/images\/14618990795722cf4763dce.png",
		"savedraft": "savedraft",
		"dated": "Apr 27, 2016",
		"slug": "taking-automatic-remediation-action-on-azure-vm-alert-generation",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Using a new feature in Azure, now you can easily configure to trigger an Azure Automation Runbook when an Alert is triggered on an Azure Virtual Machine to take a remediation action. To leverage this feature all you need to do is link the alert on Azure VM to an already existing Azure Automation ...<\/p>\n",
		"addpost": "addpost",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "ROADMAP - Solutions to help with Migration from Azure ASM to ARM portal",
		"postDate": "22-04-2016",
		"tags": [
			"announcement",
			"arm",
			"asm",
			"azure",
			"azureresourcemanager",
			"azureservicemanagement"
		],
		"category": "Azure",
		"body": "In additional to the tool I mentioned yesterday regarding [Migrating from Azure ASM to ARM portal](http:\/\/harvestingclouds.com\/Migrating-from-Azure-ASM-to-ARM-portal) there are various solutions in the pipeline. This post looks at the high level Roadmap for the same from Microsoft.\r\n\r\nMicrosoft has promised that they are committed to make the migration more easier from ASM (older) to ARM (newer) portal. Various solutions are already in the pipeline for this.\r\nBelow are the details and roadmap for the tentative timelines for these solutions.\r\n\r\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" width=\"29%\"> <p><b>Solution<\/b><\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p><b>Customer Experience<\/b><\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p><b>Expected availability in 2016<\/b><\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Script migration<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>VM is rebooted as it is recreated in the Resource Manager model. While the Virtual Machines for the environment are recreated, the network is disconnected.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q1<\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Virtual Machines, no VNET<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>As all Virtual Machines deployed in the Resource Manager model must be in a VNet, Virtual Machines will be migrated and placed in a new VNET. This will result in a change in network configuration, requiring a reboot to reconnect.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q2<\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Virtual Machines with VNET<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>Starting in Q2, the platform will offer Virtual Machine migration from ASM to Resource Manager model without disrupting the running Virtual Machine. This will require disconnecting any VNets connected on-premises, whether via ExpressRoute or VPN, before doing the migration.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q2<\/p> <\/td> <\/tr> <tr> <td valign=\"top\" width=\"29%\"> <p>Virtual Machines with basic hybrid (one connection)<\/p> <\/td> <td valign=\"top\" width=\"51%\"> <p>Starting in Q3, the platform will offer Virtual Machine migration from ASM to Resource Manager model without disrupting the running Virtual Machine and with minimal disruption to a basic hybrid connection, limited to just one connection back on-premises. More complex connections will require disconnecting before doing the migration.<\/p> <\/td> <td valign=\"top\" width=\"18%\"> <p align=\"center\">Q3<\/p> <\/td> <\/tr> <\/tbody> <\/table>\r\n\r\nReference: [Transitioning to the Resource Manager model](https:\/\/azure.microsoft.com\/en-us\/blog\/transitioning-to-the-resource-manager-model\/)",
		"addpost": "addpost",
		"dated": "Apr 22, 2016",
		"slug": "roadmap-solutions-to-help-with-migration-from-azure-asm-to-arm-portal",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>In additional to the tool I mentioned yesterday regarding <a href=\"http:\/\/harvestingclouds.com\/Migrating-from-Azure-ASM-to-ARM-portal\">Migrating from Azure ASM to ARM portal<\/a> there are various solutions in the pipeline. This post looks at the high level Roadmap for the same from Microsoft.<\/p>...\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Migrating from Azure ASM to ARM portal",
		"postDate": "21-04-2016",
		"tags": [
			"arm",
			"asm",
			"azure",
			"azureresourcemanager",
			"azureservicemanagement"
		],
		"category": "Azure",
		"body": "With co-existing Azure Service Management or ASM portal (older) and Azure Resource Manager or ARM portal (newer) there has been lots of confusions and problems for IT administrators.\r\nThe bottom line of all the discussion around the two portals is that **ARM is the future and is here to stay**. It means that you need to **plan and migrate** your resources from ASM portal to the ARM portal.\r\n\r\nThe key resource is your infrastructure which primarily consists of virtual machines. To migrate a single Virtual Machine (VM) from ASM portal to ARM portal you can leverage a set of PowerShell scripts called ASM2ARM.\r\nYou can download these scripts and check their description on [GitHub here on the **ASM2ARM** page](https:\/\/github.com\/fullscale180\/asm2arm). You can check the detailed instructions there too.\r\n\r\nTo plan this right now is very important as the transitioning to Azure Resource Manager model is already underway. Any future development and investment seems to be happening only in the newer portal only.\r\n\r\n**Reference:** [ASM2ARM scripts on GitHub](https:\/\/github.com\/fullscale180\/asm2arm)",
		"addpost": "addpost",
		"dated": "Apr 21, 2016",
		"slug": "migrating-from-azure-asm-to-arm-portal",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>With co-existing Azure Service Management or ASM portal (older) and Azure Resource Manager or ARM portal (newer) there has been lots of confusions and problems for IT administrators.\nThe bottom line of all the discussion around the two portals is that <strong>ARM is the future and is here to stay...<\/strong><\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "PowerShell DSC - Partial Configurations",
		"postDate": "20-04-2016",
		"tags": [
			"dsc",
			"powershell"
		],
		"category": "PowerShell",
		"body": "**Partial Configurations** is a new feature in PowerShell 5.0 Desired State Configuration or DSC. It allows the configurations to be delivered in parts or fragments. These configurations can come from various sources.\r\nThe Local Configuration Manager or LCM on the target node puts these partial configurations from different sources together and after that apply the same as a single configuration.\r\n\r\nThis opens various possibilities for Enterprises to manage their infrastructure and designate the responsibility to various teams for a single node. The team expert in a particular field can focus on that feature without worrying about other features.\r\n\r\nYou can have partial configurations in following modes:\r\n\r\n 1. Push Mode\r\n 2. Pull Mode\r\n 3. Hybrid Mode (i.e. combination of Push and Pull)\r\n \r\n### Configuration for the PUSH Mode\r\n\r\nYou need to follow three steps to configure Partial configurations for the PUSH mode:\r\n\r\n - Configure the LCM, on the target node, to expect partial configurations\r\n - Push each partial configuration from different sources using **Publish-DSCConfiguration** cmdlet. Target node will automatically combine the partial configurations into single configuration.\r\n - Apply the configuration by calling the **Start-DSCConfiguration**cmdlet\r\n \r\n### Configuration for the PULL Mode\r\n\r\nThis is bit complex than the Push mode. In nutshell you only need couple of steps:\r\n\r\n - Configure the LCM, on the target node, to receive partial configurations but from PULL servers\r\n - Name and locate the configuration documents properly on the pull servers\r\n \r\nTo know more about DSC Partial configurations follow the below references:\r\n\r\n   - [Detailed Blog by AutomationNext with very valuable insights](https:\/\/automationnext.wordpress.com\/2016\/04\/19\/powershell-desired-state-configuration-partial-configurations-without-configurationid\/)\r\n   - [Official MSDN Article](https:\/\/msdn.microsoft.com\/en-us\/powershell\/dsc\/partialconfigs)",
		"addpost": "addpost",
		"dated": "Apr 20, 2016",
		"slug": "powershell-dsc-partial-configurations",
		"categoryslug": "powershell",
		"status": "publised",
		"summary": "\n<p><strong>Partial Configurations<\/strong> is a new feature in PowerShell 5.0 Desired State Configuration or DSC. It allows the configurations to be delivered in parts or fragments. These configurations can come from various sources.\nThe Local Configuration Manager or LCM on the target node puts the...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Azure Container Service hits General Availability",
		"postDate": "19-04-2016",
		"tags": [
			"azure",
			"general"
		],
		"category": "Azure",
		"body": "Azure Container Service has finally hit General Availability today. \r\n\r\nIf you don't know already, it is the \"container hosting solution\" which is optimized for Microsoft's Azure cloud.\r\nAll the tools that you may be familiar with when working with a Container Service should work like Apache Mesos or Docker Swarm. It only uses open source components in the orchestration layers to give you portability of full applications.\r\n\r\nYou can find the announcement here: [GA for Azure Container Service](https:\/\/azure.microsoft.com\/en-us\/updates\/general-availability-azure-container-service\/)\r\n\r\nYou can learn more about the Container Service as offered by Azure on the product page here: [Azure Container Service](https:\/\/azure.microsoft.com\/en-us\/services\/container-service\/)\r\n",
		"addpost": "addpost",
		"dated": "Apr 19, 2016",
		"slug": "azure-container-service-hits-general-availability",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Azure Container Service has finally hit General Availability today. <\/p>\n<p>If you don't know already, it is the \"container hosting solution\" which is optimized for Microsoft's Azure cloud.\nAll the tools that you may be familiar with when working with a Container Service should work lik...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Azure Authentication - Authenticating any Azure API Request in your Application",
		"postDate": "15-04-2016",
		"tags": [
			".net",
			"azure",
			"csharp"
		],
		"category": "Azure",
		"body": "I have created a code sample to showcase how you can authenticate any request programatically with Azure. \r\nThis also contains **a Reusable Authentication Helper class** which you can directly use in your code.\r\n\r\n### Where is the code\r\n\r\nYou can find the complete code sample along with the reusable Azure Authentication Helper class library from this GitHub repo:\r\n[Azure Authentication Sample](https:\/\/github.com\/HarvestingClouds\/AzureAuthentication)\r\n\r\n### What are my authentication Options\r\n\r\nYou have the following options\r\n\r\n - Authenticating by **Prompting** for Credentials from end user. (This needs end user interaction)\r\n - Authenticating by **Credentials** i.e. using a password. (This does not need any end user interaction)\r\n - Authenticating by using a **Certificate** ( This also does not need any end user interaction)\r\n\r\nI have provided this functionality in 3 separate methods, in a separate class file along with it's interface. \r\nYou can follow the instructions in the ReadMe file in the GitHub repo and start using any one of the method.\r\n\r\nI hope you find this usefull and this will avoid the trouble of figuring things out, which I have already undergone. \r\n\r\nLet me know in the comments below if you have any questions or anything to add to this.",
		"addpost": "addpost",
		"dated": "Apr 15, 2016",
		"slug": "azure-authentication-authenticating-any-azure-api-request-in-your-application",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>I have created a code sample to showcase how you can authenticate any request programatically with Azure.\nThis also contains <strong>a Reusable Authentication Helper class<\/strong> which you can directly use in your code.<\/p>\n<h3>Where is the code<\/h3>\n<p>You can find the complete code sample alo...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Run Azure Automation Runbooks via PowerShell ISE",
		"postDate": "14-04-2016",
		"tags": [
			"automation",
			"azure",
			"powershell"
		],
		"category": "Azure",
		"body": "Today I came across this blog post from my friend: [Azure Automation PowerShell ISE add-on](https:\/\/scomanswers.wordpress.com\/2016\/04\/11\/azure-automation-powershell-ise-add-on\/)\r\n\r\nWhat I came to know is that now you can Run the Azure Automation Runbooks via PowerShell ISE. This solves a big pain point for all Azure developers.\r\nNow you will be able to develop and test your scripts right from the convenience of your laptop's local PowerShell ISE. \r\n\r\n### What you need to do\r\nAll you need to do is install the PowerShell Add-On using the below cmdlet:\r\n\r\n```powershell\r\nFind-Module AzureAutomationAuthoringToolkit | Install-Module -Scope CurrentUser\r\n```\r\n\r\nThen import the module using below cmdlet:\r\n\r\n```powershell\r\nImport-Module AzureAutomationAuthoringToolkit\r\n```\r\n\r\nYou can configure the Add-On using a Configuration tab in the add-on and start getting your hands dirty. \r\n\r\n### Official Information from the Add-On Help\r\n\r\n#### Capabilities\r\n\r\n - Test runbooks on your local machine and in the Azure Automation service: \r\n - Store and edit Automation Assets locally \r\n - Use Automation Activities (Get-AutomationVariable, Get-AutomationPSCredential, etc) in local PowerShell scripts \r\n - Sync changes back to your Automation Account \r\n - Run test jobs in Automation and view results \r\n\r\n#### Notes\r\nAssets\r\n\r\n - Secret values (passwords, encrypted variables) are not downloaded automatically; they need to be set manually the first time the account is synced \r\n - Values that haven't been downloaded will be highlighted \r\n - Asset values you enter locally will not get overwritten when you sync from the cloud \r\n\r\nRunbooks \r\n\r\n - Native PowerShell and PowerShell Workflow runbooks are supported \r\n\r\nCheck the screenshot regarding this information below:\r\n![Official Notes](http:\/\/HarvestingClouds.com\/images\/1461735632572050d069253.png \"Official Notes\")\r\n\r\n### How much time it would take me\r\nIn all it would take you under 10 mins to get setup and rolling.\r\n\r\n### Where is more information on this and screenshots\r\nGo to the official [Technet blog by clicking HERE.](https:\/\/blogs.technet.microsoft.com\/msoms\/2016\/04\/08\/the-way-cool-azure-automation-powershell-ise-add-on\/)\r\n\r\nStart playing around and let us know your initial impression in the comments below. If you have any doubts and I will be happy to address them.",
		"addpost": "addpost",
		"dated": "Apr 14, 2016",
		"slug": "run-azure-automation-runbooks-via-powershell-ise",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Today I came across this blog post from my friend: <a href=\"https:\/\/scomanswers.wordpress.com\/2016\/04\/11\/azure-automation-powershell-ise-add-on\/\">Azure Automation PowerShell ISE add-on<\/a><\/p>\n<p>What I came to know is that now you can Run the Azure Automation Runbooks via PowerShell ISE. This so...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Various Options Added to Buy Microsoft Azure Active Directory Basic",
		"postDate": "13-04-2016",
		"tags": [
			"azure",
			"general",
			"ad",
			"activedirectory"
		],
		"category": "Azure",
		"body": "Today Microsoft announced that they have added various options to buy Microsoft Azure Active Directory (AAD) Basic. \r\nYou can now buy it through the Direct program as well as through following options:\r\n\r\n - [Microsoft Enterprise Agreement](https:\/\/www.microsoft.com\/en-us\/licensing\/licensing-programs\/enterprise.aspx?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP)\r\n - [Open Volume License Program](https:\/\/www.microsoft.com\/en-us\/licensing\/licensing-programs\/open-license.aspx?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP)\r\n - [Microsoft Cloud Solution Provider](https:\/\/partner.microsoft.com\/en-US\/Solutions\/cloud-reseller-overview?WT.mc_id=azurebg_email_Trans_1065_Tier2_Release_MOSP)\r\n\r\nTo purchase, sign in to the [Office 365 Administration Portal](https:\/\/portal.office.com)\r\n\r\nYou can also watch the below video for details. Although the video is for AAD Premium, the steps are essentially similar for AAD Basic.\r\n<iframe src=\"https:\/\/channel9.msdn.com\/Series\/Azure-Active-Directory-Videos-Demos\/How-to-Purchase-Azure-Active-Directory-Premium-Existing-Customer\/player\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"><\/iframe>\r\n\r\nYou can also engage a partner to assist you with the purchase and your Azure Active Directory related any requirements. \r\n[Infront Consulting Group](http:\/\/www.infrontconsulting.com\/) (where I currently work) is one such partner who are highly respected in market and are Microsoft Gold Certified Partner. \r\n\r\nThanks for reading! If you have any questions please ask in the comments below.",
		"addpost": "addpost",
		"dated": "Apr 13, 2016",
		"slug": "various-options-added-to-buy-microsoft-azure-active-directory-basic",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Today Microsoft announced that they have added various options to buy Microsoft Azure Active Directory (AAD) Basic.\nYou can now buy it through the Direct program as well as through following options:<\/p>\n<ul><li><a href=\"https:\/\/www.microsoft.com\/en-us\/licensing\/licensing-programs\/enterprise.asp...\"><\/a><\/li><\/ul>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Multiple Values In Grid.Mvc Single Column Filter via Checkboxes with Code Sample",
		"postDate": "12-04-2016",
		"tags": [
			"csharp",
			"gridmvc",
			"mvc",
			"webdevelopment"
		],
		"category": "Web Development",
		"body": "I have been struggling to implement multiple filters in a single column in Grid.Mvc tool. I have solved this by altering the code and updating the custom widget.\r\n**Note:** The WithMultipleFilters() option will not help you in this. That option enables multiple filters on different columns. To have multiple filters in the same column you need to update the way filtering works in the tool itself.\r\n\r\nI have used a list of checkboxes and any or all of the elements selected in this checkbox list will be used for filtering the column values.\r\n\r\nYou can find the code in my fork of the official Grid.Mvc repo at below link:\r\n<a href=\"https:\/\/github.com\/HarvestingClouds\/Grid.Mvc\" target=\"_blank\">Fork of Grid.Mvc repo with Advance Filters<\/a>\r\n\r\nI have also created a pull request for the same so that more people get benefit from this if they refer the master branch of the main repo.\r\n\r\n### What are the changes I have done?\r\nI have made changes to two files:\r\n\r\n 1. **DefaultColumnFilter.cs** file in \"**GridMvc**\" class library project under the Filters folder. I have updated the GetFilterExpression method to create multiple expressions based on the pipeline character in filter values.\r\n 2. **gridmvc.customwidgets.js** file in \"**GridMvc.Site**\" web application project\r\n\r\nBoth of these paths are shown below:\r\nLocation of DefaultColumnFilter.cs:\r\n![DefaultColumnFilter.cs](http:\/\/HarvestingClouds.com\/images\/146173541957204ffb99678.png \"DefaultColumnFilter.cs\")\r\n\r\nLocation of gridmvc.customwidgets.js:\r\n![gridmvc.customwidgets.js](http:\/\/HarvestingClouds.com\/images\/146173543057205006529e6.png \"gridmvc.customwidgets.js\")\r\n\r\nHow the end result look like:\r\n![Checkbox Filtering](http:\/\/HarvestingClouds.com\/images\/14617354255720500171fe7.png \"Checkbox Filtering\")\r\n\r\nYou can directly use the code if you want. Just honor the license of the original author.\r\n\r\nLet me know in the comments below if you have any doubts and I will be happy to address them.",
		"addpost": "addpost",
		"dated": "Apr 12, 2016",
		"slug": "multiple-values-in-gridmvc-single-column-filter-via-checkboxes-with-code-sample",
		"categoryslug": "web-development",
		"status": "publised",
		"summary": "\n<p>I have been struggling to implement multiple filters in a single column in Grid.Mvc tool. I have solved this by altering the code and updating the custom widget.\n<strong>Note:<\/strong> The WithMultipleFilters() option will not help you in this. That option enables multiple filters on different co...<\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Getting Started - Azure Site Recovery (ASR) In New Azure Portal",
		"postDate": "09-04-2016",
		"tags": [
			"arm",
			"azure"
		],
		"category": "Azure",
		"body": "Azure Site Recovery or ASR is now available in the new Azure Resource Manager or ARM portal (codename Ibiza) with modern user interface. It is in preview at this stage. But it is production ready for all the Hyper-V related scenarios.\r\n**Your older Vaults (created via Classic ASM Azure Portal) will not be available in ASR preview feature.**\r\n\r\n### What are the new features\r\n\r\nThe new features include:\r\n\r\n* All the goodness of Azure Resource Manager in ASR\r\n* Lean experience for various ASR scenarios\r\n* Enhancements to the specific Site Recovery scenarios\r\n\r\n### Lets take a quick look at some of these.\r\n\r\nIf you Browse and search for \"Recovery\" you get Recovery Services Vaults as Preview feature.\r\n![Browse and Search](http:\/\/HarvestingClouds.com\/images\/14617358075720517f78904.png \"Browse and Search\")\r\n\r\nClicking on it will open up the blade for \"Recovery Services valuts\". Notice that Microsoft has PREVIEW text in this.\r\n![alt text](http:\/\/HarvestingClouds.com\/images\/1461735702572051161683f.png \"ASR Vault\")\r\n\r\nClicking on the Add button brings up the ASR vault creation blade. Notice the locations available for vault creation here.\r\n![Vault Creation](http:\/\/HarvestingClouds.com\/images\/14617359385720520210878.png \"Vault Creation\")\r\n\r\nAfter you hit create the Vault gets deployed really quickly. I tested for East US location and it was created in under 10 secs.\r\nRefresh to view your newly created vault. Click on it to open the NEW ASR Vault features. Notice that the Backup feature is also there in the ASR vault now.\r\n![New Vault](http:\/\/HarvestingClouds.com\/images\/1461735907572051e31549a.png \"New Vault\")\r\n\r\nTo find the options for replication go to Settings -> Getting Started section -> Site Recovery -> Follow Wizard.\r\n![New Site Recovery Wizard](http:\/\/HarvestingClouds.com\/images\/1461735869572051bd2d6fa.png \"New Site Recovery Wizard\")\r\n\r\nThe Scenario Types available are only two. But all the scenarios are covered here:\r\n\r\n* From my site to Azure\r\n* From my site to another site\r\n\r\nBased on the scenario you select you are asked for different options. The options for Virtualization\/Management Server type for \"From my site to Azure\" are:\r\n\r\n* VMM\r\n* Stand alone Hyper-V hosts\r\n* vCenter\r\n* Physical machines (not virtualized)\r\n![Creation Options](http:\/\/HarvestingClouds.com\/images\/14617358385720519e578ba.png \"Creation Options\")\r\n\r\n### Backup in ASR vault\r\nAnother feature is creation of Backups from the same vault. Click on the + icon for Backup in the Vault main blade and then follow the wizard for the preview feature.\r\n![Backup In ASR](http:\/\/HarvestingClouds.com\/images\/14617357575720514d5d1d8.png \"Backup In ASR\")\r\nNotice in the screenshot above that the backup types available are:\r\n\r\n* Azure virtual machine backup\r\n* File Folder backup\r\n* System Center Data Protection Manager\r\n\r\nSelecting each option provides you with details for next steps. You can then create a backup policy and configure Items to backup.\r\n\r\nGive these features a try and let us know in comments below how you find the new features.\r\nHappy Exploring!",
		"addpost": "addpost",
		"dated": "Apr 09, 2016",
		"slug": "getting-started-azure-site-recovery-asr-in-new-azure-portal",
		"categoryslug": "azure",
		"status": "publised",
		"summary": "\n<p>Azure Site Recovery or ASR is now available in the new Azure Resource Manager or ARM portal (codename Ibiza) with modern user interface. It is in preview at this stage. But it is production ready for all the Hyper-V related scenarios.\n<strong>Your older Vaults (created via Classic ASM Azure Porta...<\/strong><\/p>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Coming Soon - Windows 10 Anniversary Update",
		"postDate": "08-04-2016",
		"tags": [
			"announcement",
			"windows10"
		],
		"category": "General",
		"body": "Windows 10 Anniversary Update is coming this summary. It will be available for free download for the following devices (which is almost every device):\r\n\r\n* PCs\r\n* Tablets\r\n* Phones\r\n* Xbox One\r\n* Microsoft HoloLens\r\n* IoT\r\n\r\n## What this means to you:\r\n\r\n* Improved Biometric Security\r\n* Microsoft Edge browser\r\n* Windows Ink (where just one click of pen will bring up all the gamut available for use with your Pen device)\r\n* Universal Windows Platform or UWP apps are coming to XBox through a Unified Windows Store. Also if you own a XBox you will be able to turn it into a dev box and do development with it\r\n* Various improvements to Cortana\r\n\r\n<a href=\"https:\/\/www.microsoft.com\/en-us\/windows\/upcoming-features\" target=\"_blank\">Check out more details here<\/a>\r\n",
		"addpost": "addpost",
		"dated": "Apr 08, 2016",
		"slug": "coming-soon-windows-10-anniversary-update",
		"categoryslug": "general",
		"status": "publised",
		"summary": "\n<p>Windows 10 Anniversary Update is coming this summary. It will be available for free download for the following devices (which is almost every device):<\/p>\n<ul><li>PCs<\/li>\n<li>Tablets<\/li>\n<li>Phones<\/li>\n<li>Xbox One<\/li>\n<li>Microsoft HoloLens<\/li>\n<li>IoT<\/li>\n<\/ul><h2>What this means to you...<\/h2>\n",
		"prevStatus": "publised"
	},
	{
		"author": "@20aman",
		"title": "Introducing Harvesting Clouds",
		"postDate": "04-01-2016",
		"tags": [
			"general"
		],
		"category": "General",
		"body": "Harvesting Clouds is a blog about all things Cloud. Be it Private Cloud or Public Cloud, I will try to cover various aspects of both.\r\n\r\n### Private Cloud\r\n\r\nMy key areas of interest in Private Cloud include the following:\r\n\r\n* PowerShell Scripting\r\n* Windows Azure Pack or WAP\r\n* Service Management Automation or SMA\r\n* Azure Stack\r\n* System Center Orchestrator\r\n* System Center VMM and other products like Service Manager, Ops Mgr, etc.\r\n\r\n### Public Cloud\r\n\r\nIn addition to the Private Cloud the areas of interest in Public Cloud are:\r\n\r\n* Microsoft Azure and Amazon Web Services - both IaaS and PaaS\r\n* Azure Automation\r\n* Desired State Configurations\r\n* Application Insights\r\n* Azure Web Apps\r\n* Web APIs\r\n* Azure Site Recovery and Backup\r\n* Migrations from Private to Public Clouds\r\n\r\n### Common Areas & Best of both worlds\r\n\r\nI have also been involved in creating Hybrid clouds leveraging the best of both worlds. I will try to share my knowledge on this with you. The key aspects in this area are:\r\n* Building Hybrid Solutions\r\n* Developing Web or Desktop Applications targetting either or both the clouds (using MVC, Dot Net)\r\n* Using TFS Online, Visual Studio, GitHub to better collaborate and work in an automated fashion\r\n* Release Manager to automate your release workflows\r\n\r\n### Primary Focus\r\n\r\nAs you must have guessed by now, the primary focus for this blog will be Microsoft Technologies. We will also explore beyond this and will be talking about various emerging open source technologies and the new Better Together world with the amalgamation of various technologies in one solution.\r\n\r\nI invite to take this journey with me!\r\nKeep learning!\r\n",
		"addpost": "addpost",
		"dated": "Apr 01, 2016",
		"slug": "introducing-harvesting-clouds",
		"categoryslug": "general",
		"status": "publised",
		"summary": "\n<p>Harvesting Clouds is a blog about all things Cloud. Be it Private Cloud or Public Cloud, I will try to cover various aspects of both.<\/p>\n<h3>Private Cloud<\/h3>\n<p>My key areas of interest in Private Cloud include the following:<\/p>\n<ul><li>PowerShell Scripting<\/li>\n<li>Windows Azure Pack or WAP...<\/li><\/ul>\n",
		"prevStatus": "publised"
	}
]